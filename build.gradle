plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.7'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.google.cloud.tools.jib' version '3.4.3'
    id 'checkstyle'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'site.billingwise.api'
version = '0.0.3-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "2023.0.2")
}

dependencies {
    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // spring data
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // rest docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // junit
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // AWS S3
	implementation 'io.awspring.cloud:spring-cloud-aws-core:2.4.4'

    // poi
    implementation 'org.apache.poi:poi:5.2.2'
    implementation 'org.apache.poi:poi-ooxml:5.2.2'
}

jar {
    enabled = false
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

jib {
    from {
        image = "eclipse-temurin:17-jdk"
    }
    to {
        image = "901929896752.dkr.ecr.ap-northeast-2.amazonaws.com/billingwise-api-ecr"
        tags = ["${project.version}".toString()]
        credHelper = 'ecr-login'
    }
    container {
        creationTime = "USE_CURRENT_TIMESTAMP"
        jvmFlags = ['-XX:+UseContainerSupport', '-Dserver.port=8081', '-Dfile.encoding=UTF-8', '-Duser.timezone=Asia/Seoul']
        ports = ['8081']
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
    }
}

checkstyle {
    configFile = file("config/checkstyle/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "config/checkstyle/naver-checkstyle-suppressions.xml"]
}

jacocoTestReport {
    reports {
        xml.required.set(true)
    }
}

sonar {
    properties {
        property "sonar.projectKey", "Billing-Wise_server-api"
        property "sonar.organization", "billing-wise"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.java.checkstyle.reportPaths', 'build/reports/checkstyle/main.xml'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
    }
}

asciidoctor {
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir
    dependsOn test
}


